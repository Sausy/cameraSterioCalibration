// Generated by gencpp from file roboy_middleware_msgs/XL320Request.msg
// DO NOT EDIT!


#ifndef ROBOY_MIDDLEWARE_MSGS_MESSAGE_XL320REQUEST_H
#define ROBOY_MIDDLEWARE_MSGS_MESSAGE_XL320REQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace roboy_middleware_msgs
{
template <class ContainerAllocator>
struct XL320Request_
{
  typedef XL320Request_<ContainerAllocator> Type;

  XL320Request_()
    : type(false)
    , motor(0)
    , address(0)
    , value(0)  {
    }
  XL320Request_(const ContainerAllocator& _alloc)
    : type(false)
    , motor(0)
    , address(0)
    , value(0)  {
  (void)_alloc;
    }



   typedef uint8_t _type_type;
  _type_type type;

   typedef uint8_t _motor_type;
  _motor_type motor;

   typedef uint8_t _address_type;
  _address_type address;

   typedef int16_t _value_type;
  _value_type value;





  typedef boost::shared_ptr< ::roboy_middleware_msgs::XL320Request_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roboy_middleware_msgs::XL320Request_<ContainerAllocator> const> ConstPtr;

}; // struct XL320Request_

typedef ::roboy_middleware_msgs::XL320Request_<std::allocator<void> > XL320Request;

typedef boost::shared_ptr< ::roboy_middleware_msgs::XL320Request > XL320RequestPtr;
typedef boost::shared_ptr< ::roboy_middleware_msgs::XL320Request const> XL320RequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roboy_middleware_msgs::XL320Request_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roboy_middleware_msgs::XL320Request_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::roboy_middleware_msgs::XL320Request_<ContainerAllocator1> & lhs, const ::roboy_middleware_msgs::XL320Request_<ContainerAllocator2> & rhs)
{
  return lhs.type == rhs.type &&
    lhs.motor == rhs.motor &&
    lhs.address == rhs.address &&
    lhs.value == rhs.value;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::roboy_middleware_msgs::XL320Request_<ContainerAllocator1> & lhs, const ::roboy_middleware_msgs::XL320Request_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace roboy_middleware_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::roboy_middleware_msgs::XL320Request_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roboy_middleware_msgs::XL320Request_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roboy_middleware_msgs::XL320Request_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roboy_middleware_msgs::XL320Request_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboy_middleware_msgs::XL320Request_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboy_middleware_msgs::XL320Request_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roboy_middleware_msgs::XL320Request_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d0b3c3391dc54fe3a913cbf9ecf628c0";
  }

  static const char* value(const ::roboy_middleware_msgs::XL320Request_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd0b3c3391dc54fe3ULL;
  static const uint64_t static_value2 = 0xa913cbf9ecf628c0ULL;
};

template<class ContainerAllocator>
struct DataType< ::roboy_middleware_msgs::XL320Request_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roboy_middleware_msgs/XL320Request";
  }

  static const char* value(const ::roboy_middleware_msgs::XL320Request_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roboy_middleware_msgs::XL320Request_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# 0: read 1:write\n"
"bool type\n"
"uint8 motor\n"
"# EEPROM Area\n"
"# MODEL_NUMBER             = 0, /**< Model number [R] (default=350) */\n"
"# VERSION                  = 2, /**< Information on the version of firmware [R] */\n"
"# id                       = 3, /**< id of Dynamixel [RW] (default=1 ; min=0 ; max=252) */\n"
"# BAUD_RATE                = 4, /**< Baud Rate of Dynamixel [RW] (default=3 ; min=0 ; max=3) 0: 9600, 1:57600, 2:115200, 3:1Mbps*/\n"
"# RETURN_DELAY_TIME        = 5, /**< Return Delay Time [RW] (default=250 ; min=0 ; max=254) */\n"
"# CW_ANGLE_LIMIT           = 6, /**< clockwise Angle Limit [RW] (default=0 ; min=0 ; max=1023) */\n"
"# CCW_ANGLE_LIMIT          = 8, /**< counterclockwise Angle Limit [RW] (default=1023 ; min=0 ; max=1023) */\n"
"# CONTROL_MODE             = 11, /**< Control Mode [RW] (default=2 ; min=1 ; max=2) */\n"
"# LIMIT_TEMPERATURE        = 12, /**< Internal Limit Temperature [RW] (default=65 ; min=0 ; max=150) */\n"
"# LOWER_LIMIT_VOLTAGE      = 13, /**< Lowest Limit Voltage [RW] (default=60 ; min=50 ; max=250) */\n"
"# UPPPER_LIMIT_VOLTAGE     = 14, /**< Upper Limit Voltage [RW] (default=90 ; min=50 ; max=250) */\n"
"# MAX_TORQUE               = 15, /**< Lowest byte of Max. Torque [RW] (default=1023 ; min=0 ; max=1023) */\n"
"# RETURN_LEVEL             = 17, /**< Return Level [RW] (default=2 ; min=0 ; max=2) */\n"
"# ALARM_SHUTDOWN           = 18, /**< Shutdown for Alarm [RW] (default=3 ; min=0 ; max=7) */\n"
"# RAM Area\n"
"# TORQUE_ENABLE            = 24, /**< Torque On/Off [RW] (default=0 ; min=0 ; max=1) */\n"
"# LED                      = 25, /**< LED On/Off [RW] (default=0 ; min=0 ; max=7) */\n"
"# D_GAIN    				 = 27, /**< D Gain [RW] (default=0 ; min=0 ; max=254) */\n"
"# I_GAIN      			 = 28, /**< I Gain [RW] (default=0 ; min=0 ; max=254) */\n"
"# P_GAIN    				 = 29, /**< P Gain [RW] (default=32 ; min=0 ; max=254) */\n"
"# GOAL_POSITION            = 30, /**< Goal Position [RW] (min=0 ; max=1023) */\n"
"# GOAL_SPEED               = 32, /**< Goal Speed [RW] (min=0 ; max=2047) */\n"
"# GOAL_TORQUE 		     = 35, /**< Goal Torque [RW] (min=0 ; max=1023) */\n"
"# PRESENT_POSITION         = 37, /**< Current Position [R] */\n"
"# PRESENT_SPEED            = 39, /**< Current Speed [R] */\n"
"# PRESENT_LOAD             = 41, /**< Current Load [R] */\n"
"# PRESENT_VOLTAGE          = 45, /**< Current Voltage [R] */\n"
"# PRESENT_TEMPERATURE      = 46, /**< Present temperature [R] */\n"
"# REGISTERED_INSTRUCTION   = 47, /**< Registered Instruction [R] (default=0) */\n"
"# MOVING                   = 49, /**< Moving [R] (default=0) */\n"
"# HARDWARE_ERROR           = 50, /**< Hardware error status [R] (default=0) */\n"
"# PUNCH                    = 51  /**< Punch [RW] (default=32 ; min=0 ; max=1023) */\n"
"uint8 address\n"
"int16 value\n"
;
  }

  static const char* value(const ::roboy_middleware_msgs::XL320Request_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roboy_middleware_msgs::XL320Request_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
      stream.next(m.motor);
      stream.next(m.address);
      stream.next(m.value);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct XL320Request_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roboy_middleware_msgs::XL320Request_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roboy_middleware_msgs::XL320Request_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
    s << indent << "motor: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.motor);
    s << indent << "address: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.address);
    s << indent << "value: ";
    Printer<int16_t>::stream(s, indent + "  ", v.value);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOY_MIDDLEWARE_MSGS_MESSAGE_XL320REQUEST_H
